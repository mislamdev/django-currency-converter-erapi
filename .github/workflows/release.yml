name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'auto'
        type: choice
        options:
        - auto
        - major
        - minor
        - patch

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Validate changelog
        run: |
          python scripts/changelog.py validate

      - name: Determine version bump (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event.inputs.version_bump }}" = "auto" ]; then
            # Auto-detect from changelog
            bump_type=$(python scripts/version_manager.py suggest | grep "Suggested Bump:" | awk '{print tolower($3)}')
            if [ "$bump_type" = "none" ]; then
              echo "No changes to release"
              exit 1
            fi
          else
            bump_type="${{ github.event.inputs.version_bump }}"
          fi
          echo "BUMP_TYPE=$bump_type" >> $GITHUB_ENV

      - name: Bump version (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          current_version=$(python scripts/version_manager.py current)
          python scripts/version_manager.py bump --type $BUMP_TYPE
          new_version=$(python scripts/version_manager.py current)
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV
          echo "OLD_VERSION=$current_version" >> $GITHUB_ENV

      - name: Create changelog release (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          python scripts/changelog.py release --version $NEW_VERSION

      - name: Extract version from tag (tag trigger)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Run tests
        run: |
          export DJANGO_SETTINGS_MODULE=tests.settings
          export PYTHONPATH="${PYTHONPATH}:$(pwd):$(pwd)/tests"
          export CURRENCY_API_KEY="${{ secrets.CURRENCY_API_KEY }}"
          pytest --cov=currency_converter_erapi --cov-report=xml --maxfail=1

      - name: Build package
        run: |
          python -m pip install build
          python -m build

      - name: Commit and push changes (manual trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add setup.py CHANGELOG.md
          git commit -m "Release version $NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"
          git push origin main --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            ## What's Changed
            
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/v${{ env.NEW_VERSION }}/CHANGELOG.md) for detailed changes.
            
            ## Installation
            
            ```bash
            pip install django-currency-converter-erapi==${{ env.NEW_VERSION }}
            ```
            
            ## Compatibility
            
            - Python: 3.8, 3.9, 3.10, 3.11, 3.12
            - Django: 3.2, 4.0, 4.1, 4.2, 5.0, 5.1, 5.2
            
            Auto-generated by GitHub Actions
          draft: false
          prerelease: false

      - name: Publish to PyPI
        if: success()
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true

      - name: Update documentation
        if: success()
        run: |
          echo "Documentation updated for version $NEW_VERSION"
          # Add any documentation update commands here
